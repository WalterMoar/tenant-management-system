- name: Start deployment
  uses: bobheadxi/deployments@v1.4.0
  id: deployment
  with:
    step: start
    token: ${{ secrets.GITHUB_TOKEN }}
    env: ${{ inputs.environment }}
    ref: ${{ github.ref }}

- name: Helm Deploy
  id: deploy
  uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
  with:
    oc_namespace: ${{ secrets.oc_namespace }}
    oc_token: ${{ secrets.oc_token }}
    oc_server: ${{ vars.oc_server }}
    triggers: ${{ inputs.triggers }}
    ref: ${{ github.ref }}
    commands: |
      [ -z "${{ inputs.directory }}" ] || cd "${{ inputs.directory }}"

      sed -i 's/^name:.*/name: ${{ github.event.repository.name }}/' Chart.yaml
      helm package -u . --app-version="tags-${{ steps.vars.outputs.tags }}_run-${{ github.run_number }}" --version=${{ steps.pr.outputs.pr || steps.vars.outputs.version }}

      echo "üì¶ Helm package created successfully"
      ls -la *.tgz

      if [[ "${{ inputs.debug }}" == "true" ]]; then
        echo "=== VALUES FILE CONTENT ==="
        cat "${{ inputs.values }}"
        echo "=== END VALUES FILE ==="
      fi

      echo "üöÄ Starting Helm deployment..."
      helm upgrade \
        --set-string global.repository="${{ github.repository }}" \
        --set-string global.tag="${{ steps.vars.outputs.tags }}" \
        --set-string global.config.databaseUser="${{ inputs.db_user }}" \
        --set-string global.config.nodeEnv="${{ (inputs.environment == 'prod' || inputs.environment == 'production') && 'production' || (inputs.environment == 'test' && 'test' || 'development') }}" \
        --set-string global.databaseAlias="${{ steps.deploy_crunchy.outputs.release }}-crunchy" \
        ${{ inputs.params }} \
        --install --wait ${{ inputs.atomic && '--atomic' || '' }} ${{ steps.vars.outputs.release }} \
        --timeout ${{ inputs.timeout-minutes }}m \
        --values "${{ inputs.values }}" \
        ./${{ github.event.repository.name }}-${{ steps.pr.outputs.pr || steps.vars.outputs.version }}.tgz

      echo "‚úÖ Helm deployment completed"
      helm history "${{ steps.vars.outputs.release }}"
      oc delete po --field-selector=status.phase==Succeeded || true

- name: Update secrets
  uses: bcgov/action-oc-runner@10033668ef4374d9bb78149faa73e4ccda0e93dd # v1.2.3
  with:
    oc_namespace: ${{ secrets.oc_namespace }}
    oc_token: ${{ secrets.oc_token }}
    oc_server: ${{ vars.oc_server }}
    commands: |
      RELEASE="${{ steps.vars.outputs.release }}"
      echo "üîê Updating secrets for release: $RELEASE"

      echo "Patching secret $RELEASE-backend"
      CLIENT_ID=$(echo -n "${{ secrets.bcgov_sso_api_client_id }}" | base64 -w0)
      CLIENT_SECRET=$(echo -n "${{ secrets.bcgov_sso_api_client_secret }}" | base64 -w0)

      oc patch secret "$RELEASE-backend" -p '{"data":{"BCGOV_SSO_API_CLIENT_ID":"'"$CLIENT_ID"'"}}'
      oc patch secret "$RELEASE-backend" -p '{"data":{"BCGOV_SSO_API_CLIENT_SECRET":"'"$CLIENT_SECRET"'"}}'

      if [[ "${{ inputs.environment }}" == "prod" ]]; then
        LOGIN_PROXY="loginproxy.gov.bc.ca"
        ISSUER="https://loginproxy.gov.bc.ca/auth/realms/standard"
        JWKS_URI="https://loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
      elif [[ "${{ inputs.environment }}" == "test" ]]; then
        LOGIN_PROXY="test.loginproxy.gov.bc.ca"
        ISSUER="https://test.loginproxy.gov.bc.ca/auth/realms/standard"
        JWKS_URI="https://test.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
      else
        LOGIN_PROXY="dev.loginproxy.gov.bc.ca"
        ISSUER="https://dev.loginproxy.gov.bc.ca/auth/realms/standard"
        JWKS_URI="https://dev.loginproxy.gov.bc.ca/auth/realms/standard/protocol/openid-connect/certs"
      fi

      ISSUER_B64=$(echo -n "$ISSUER" | base64 -w0)
      JWKS_URI_B64=$(echo -n "$JWKS_URI" | base64 -w0)
      oc patch secret "$RELEASE-backend" -p '{"data":{"ISSUER":"'"$ISSUER_B64"'"}}'
      oc patch secret "$RELEASE-backend" -p '{"data":{"JWKS_URI":"'"$JWKS_URI_B64"'"}}'

      if oc get deployment/"$RELEASE-backend" &>/dev/null; then
        echo "üîÑ Restarting deployment $RELEASE-backend"
        oc rollout restart deployment/"$RELEASE-backend"
        echo "‚è≥ Waiting for backend deployment to complete..."
        oc rollout status deployment/"$RELEASE-backend" --timeout=300s
      else
        echo "‚ö†Ô∏è Warning: Deployment $RELEASE-backend not found"
      fi

      echo "üìù Patching ConfigMap $RELEASE-frontend-config"
      CONFIG_JSON=$(cat <<EOF
      {
        "api": {
          "baseUrl": "/api/v1"
        },
        "oidc": {
          "clientId": "${{ secrets.vite_keycloak_client_id }}",
          "realm": "standard",
          "serverUrl": "https://$LOGIN_PROXY/auth",
          "logoutUrl": "https://$LOGIN_PROXY/auth/realms/standard/protocol/openid-connect/logout"
        }
      }
      EOF
      )
      echo "$CONFIG_JSON" > default.json
      oc delete configmap "$RELEASE-frontend-config" --ignore-not-found
      oc create configmap "$RELEASE-frontend-config" --from-file=default.json
      rm default.json

      oc delete pods -l app.kubernetes.io/instance="$RELEASE-frontend"
      echo "‚è≥ Waiting for frontend deployment to complete..."
      oc rollout status deployment/"$RELEASE-frontend" --timeout=300s

- name: Update deployment status
  uses: bobheadxi/deployments@v1.4.0
  if: always()
  with:
    step: finish
    token: ${{ secrets.GITHUB_TOKEN }}
    status: ${{ job.status }}
    env: ${{ inputs.environment }}
    deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    env_url: ${{ inputs.deployment_url }}
